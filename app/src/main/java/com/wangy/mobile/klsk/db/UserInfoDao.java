package com.wangy.mobile.klsk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wangy.mobile.klsk.data.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AcId = new Property(0, String.class, "acId", true, "AC_ID");
        public final static Property AcPwd = new Property(1, String.class, "acPwd", false, "AC_PWD");
        public final static Property AcType = new Property(2, String.class, "acType", false, "AC_TYPE");
        public final static Property Account = new Property(3, String.class, "account", false, "ACCOUNT");
        public final static Property AppCode = new Property(4, String.class, "appCode", false, "APP_CODE");
        public final static Property CertificationLevel = new Property(5, String.class, "certificationLevel", false, "CERTIFICATION_LEVEL");
        public final static Property CertificationLevelName = new Property(6, String.class, "certificationLevelName", false, "CERTIFICATION_LEVEL_NAME");
        public final static Property CredentNo = new Property(7, String.class, "credentNo", false, "CREDENT_NO");
        public final static Property CredentType = new Property(8, String.class, "credentType", false, "CREDENT_TYPE");
        public final static Property DeptSource = new Property(9, String.class, "deptSource", false, "DEPT_SOURCE");
        public final static Property IsExist = new Property(10, String.class, "isExist", false, "IS_EXIST");
        public final static Property Nation = new Property(11, String.class, "nation", false, "NATION");
        public final static Property NationName = new Property(12, String.class, "nationName", false, "NATION_NAME");
        public final static Property OauthId = new Property(13, String.class, "oauthId", false, "OAUTH_ID");
        public final static Property Phone = new Property(14, String.class, "phone", false, "PHONE");
        public final static Property PhoneNo = new Property(15, String.class, "phoneNo", false, "PHONE_NO");
        public final static Property RelationId = new Property(16, String.class, "relationId", false, "RELATION_ID");
        public final static Property Sex = new Property(17, String.class, "sex", false, "SEX");
        public final static Property SexName = new Property(18, String.class, "sexName", false, "SEX_NAME");
        public final static Property Status = new Property(19, String.class, "status", false, "STATUS");
        public final static Property Ukey = new Property(20, String.class, "ukey", false, "UKEY");
        public final static Property UserId = new Property(21, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(22, String.class, "userName", false, "USER_NAME");
        public final static Property UserType = new Property(23, String.class, "userType", false, "USER_TYPE");
        public final static Property ValidBegin = new Property(24, String.class, "validBegin", false, "VALID_BEGIN");
        public final static Property ValidEnd = new Property(25, String.class, "validEnd", false, "VALID_END");
        public final static Property UsePrefer = new Property(26, String.class, "usePrefer", false, "USE_PREFER");
        public final static Property LoginName = new Property(27, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property IconUrl = new Property(28, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Ticket = new Property(29, String.class, "ticket", false, "TICKET");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"AC_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: acId
                "\"AC_PWD\" TEXT," + // 1: acPwd
                "\"AC_TYPE\" TEXT," + // 2: acType
                "\"ACCOUNT\" TEXT," + // 3: account
                "\"APP_CODE\" TEXT," + // 4: appCode
                "\"CERTIFICATION_LEVEL\" TEXT," + // 5: certificationLevel
                "\"CERTIFICATION_LEVEL_NAME\" TEXT," + // 6: certificationLevelName
                "\"CREDENT_NO\" TEXT," + // 7: credentNo
                "\"CREDENT_TYPE\" TEXT," + // 8: credentType
                "\"DEPT_SOURCE\" TEXT," + // 9: deptSource
                "\"IS_EXIST\" TEXT," + // 10: isExist
                "\"NATION\" TEXT," + // 11: nation
                "\"NATION_NAME\" TEXT," + // 12: nationName
                "\"OAUTH_ID\" TEXT," + // 13: oauthId
                "\"PHONE\" TEXT," + // 14: phone
                "\"PHONE_NO\" TEXT," + // 15: phoneNo
                "\"RELATION_ID\" TEXT," + // 16: relationId
                "\"SEX\" TEXT," + // 17: sex
                "\"SEX_NAME\" TEXT," + // 18: sexName
                "\"STATUS\" TEXT," + // 19: status
                "\"UKEY\" TEXT," + // 20: ukey
                "\"USER_ID\" TEXT," + // 21: userId
                "\"USER_NAME\" TEXT," + // 22: userName
                "\"USER_TYPE\" TEXT," + // 23: userType
                "\"VALID_BEGIN\" TEXT," + // 24: validBegin
                "\"VALID_END\" TEXT," + // 25: validEnd
                "\"USE_PREFER\" TEXT," + // 26: usePrefer
                "\"LOGIN_NAME\" TEXT," + // 27: loginName
                "\"ICON_URL\" TEXT," + // 28: iconUrl
                "\"TICKET\" TEXT);"); // 29: ticket
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String acId = entity.getAcId();
        if (acId != null) {
            stmt.bindString(1, acId);
        }
 
        String acPwd = entity.getAcPwd();
        if (acPwd != null) {
            stmt.bindString(2, acPwd);
        }
 
        String acType = entity.getAcType();
        if (acType != null) {
            stmt.bindString(3, acType);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String appCode = entity.getAppCode();
        if (appCode != null) {
            stmt.bindString(5, appCode);
        }
 
        String certificationLevel = entity.getCertificationLevel();
        if (certificationLevel != null) {
            stmt.bindString(6, certificationLevel);
        }
 
        String certificationLevelName = entity.getCertificationLevelName();
        if (certificationLevelName != null) {
            stmt.bindString(7, certificationLevelName);
        }
 
        String credentNo = entity.getCredentNo();
        if (credentNo != null) {
            stmt.bindString(8, credentNo);
        }
 
        String credentType = entity.getCredentType();
        if (credentType != null) {
            stmt.bindString(9, credentType);
        }
 
        String deptSource = entity.getDeptSource();
        if (deptSource != null) {
            stmt.bindString(10, deptSource);
        }
 
        String isExist = entity.getIsExist();
        if (isExist != null) {
            stmt.bindString(11, isExist);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(12, nation);
        }
 
        String nationName = entity.getNationName();
        if (nationName != null) {
            stmt.bindString(13, nationName);
        }
 
        String oauthId = entity.getOauthId();
        if (oauthId != null) {
            stmt.bindString(14, oauthId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String phoneNo = entity.getPhoneNo();
        if (phoneNo != null) {
            stmt.bindString(16, phoneNo);
        }
 
        String relationId = entity.getRelationId();
        if (relationId != null) {
            stmt.bindString(17, relationId);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(18, sex);
        }
 
        String sexName = entity.getSexName();
        if (sexName != null) {
            stmt.bindString(19, sexName);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(20, status);
        }
 
        String ukey = entity.getUkey();
        if (ukey != null) {
            stmt.bindString(21, ukey);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(22, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(23, userName);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(24, userType);
        }
 
        String validBegin = entity.getValidBegin();
        if (validBegin != null) {
            stmt.bindString(25, validBegin);
        }
 
        String validEnd = entity.getValidEnd();
        if (validEnd != null) {
            stmt.bindString(26, validEnd);
        }
 
        String usePrefer = entity.getUsePrefer();
        if (usePrefer != null) {
            stmt.bindString(27, usePrefer);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(28, loginName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(29, iconUrl);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(30, ticket);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String acId = entity.getAcId();
        if (acId != null) {
            stmt.bindString(1, acId);
        }
 
        String acPwd = entity.getAcPwd();
        if (acPwd != null) {
            stmt.bindString(2, acPwd);
        }
 
        String acType = entity.getAcType();
        if (acType != null) {
            stmt.bindString(3, acType);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String appCode = entity.getAppCode();
        if (appCode != null) {
            stmt.bindString(5, appCode);
        }
 
        String certificationLevel = entity.getCertificationLevel();
        if (certificationLevel != null) {
            stmt.bindString(6, certificationLevel);
        }
 
        String certificationLevelName = entity.getCertificationLevelName();
        if (certificationLevelName != null) {
            stmt.bindString(7, certificationLevelName);
        }
 
        String credentNo = entity.getCredentNo();
        if (credentNo != null) {
            stmt.bindString(8, credentNo);
        }
 
        String credentType = entity.getCredentType();
        if (credentType != null) {
            stmt.bindString(9, credentType);
        }
 
        String deptSource = entity.getDeptSource();
        if (deptSource != null) {
            stmt.bindString(10, deptSource);
        }
 
        String isExist = entity.getIsExist();
        if (isExist != null) {
            stmt.bindString(11, isExist);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(12, nation);
        }
 
        String nationName = entity.getNationName();
        if (nationName != null) {
            stmt.bindString(13, nationName);
        }
 
        String oauthId = entity.getOauthId();
        if (oauthId != null) {
            stmt.bindString(14, oauthId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String phoneNo = entity.getPhoneNo();
        if (phoneNo != null) {
            stmt.bindString(16, phoneNo);
        }
 
        String relationId = entity.getRelationId();
        if (relationId != null) {
            stmt.bindString(17, relationId);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(18, sex);
        }
 
        String sexName = entity.getSexName();
        if (sexName != null) {
            stmt.bindString(19, sexName);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(20, status);
        }
 
        String ukey = entity.getUkey();
        if (ukey != null) {
            stmt.bindString(21, ukey);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(22, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(23, userName);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(24, userType);
        }
 
        String validBegin = entity.getValidBegin();
        if (validBegin != null) {
            stmt.bindString(25, validBegin);
        }
 
        String validEnd = entity.getValidEnd();
        if (validEnd != null) {
            stmt.bindString(26, validEnd);
        }
 
        String usePrefer = entity.getUsePrefer();
        if (usePrefer != null) {
            stmt.bindString(27, usePrefer);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(28, loginName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(29, iconUrl);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(30, ticket);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // acId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // acPwd
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // acType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // account
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // appCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // certificationLevel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // certificationLevelName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // credentNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // credentType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deptSource
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isExist
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // nationName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // oauthId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // phone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // phoneNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // relationId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // sex
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // sexName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // status
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ukey
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // userId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // userName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // userType
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // validBegin
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // validEnd
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // usePrefer
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // loginName
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // iconUrl
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29) // ticket
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setAcId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAcPwd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAcType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCertificationLevel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCertificationLevelName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCredentNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCredentType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeptSource(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsExist(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNationName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOauthId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhoneNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRelationId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSex(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSexName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStatus(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUkey(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUserId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUserName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUserType(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setValidBegin(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setValidEnd(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUsePrefer(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLoginName(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setIconUrl(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTicket(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getAcId();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getAcId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getAcId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
