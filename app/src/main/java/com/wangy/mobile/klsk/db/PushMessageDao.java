package com.wangy.mobile.klsk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wangy.mobile.klsk.data.entity.PushMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_MESSAGE".
*/
public class PushMessageDao extends AbstractDao<PushMessage, String> {

    public static final String TABLENAME = "PUSH_MESSAGE";

    /**
     * Properties of entity PushMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property ActionUrl = new Property(2, String.class, "actionUrl", false, "ACTION_URL");
        public final static Property MsgType = new Property(3, String.class, "msgType", false, "MSG_TYPE");
        public final static Property Message = new Property(4, String.class, "message", false, "MESSAGE");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Sender = new Property(6, String.class, "sender", false, "SENDER");
        public final static Property PushType = new Property(7, String.class, "pushType", false, "PUSH_TYPE");
        public final static Property IsSelect = new Property(8, Boolean.class, "isSelect", false, "IS_SELECT");
    }


    public PushMessageDao(DaoConfig config) {
        super(config);
    }
    
    public PushMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_MESSAGE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"ACTION_URL\" TEXT," + // 2: actionUrl
                "\"MSG_TYPE\" TEXT NOT NULL ," + // 3: msgType
                "\"MESSAGE\" TEXT NOT NULL ," + // 4: message
                "\"DATE\" TEXT," + // 5: date
                "\"SENDER\" TEXT," + // 6: sender
                "\"PUSH_TYPE\" TEXT," + // 7: pushType
                "\"IS_SELECT\" INTEGER);"); // 8: isSelect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushMessage entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String actionUrl = entity.getActionUrl();
        if (actionUrl != null) {
            stmt.bindString(3, actionUrl);
        }
        stmt.bindString(4, entity.getMsgType());
        stmt.bindString(5, entity.getMessage());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(7, sender);
        }
 
        String pushType = entity.getPushType();
        if (pushType != null) {
            stmt.bindString(8, pushType);
        }
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(9, isSelect ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushMessage entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String actionUrl = entity.getActionUrl();
        if (actionUrl != null) {
            stmt.bindString(3, actionUrl);
        }
        stmt.bindString(4, entity.getMsgType());
        stmt.bindString(5, entity.getMessage());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(7, sender);
        }
 
        String pushType = entity.getPushType();
        if (pushType != null) {
            stmt.bindString(8, pushType);
        }
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(9, isSelect ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PushMessage readEntity(Cursor cursor, int offset) {
        PushMessage entity = new PushMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // actionUrl
            cursor.getString(offset + 3), // msgType
            cursor.getString(offset + 4), // message
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pushType
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isSelect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setActionUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsgType(cursor.getString(offset + 3));
        entity.setMessage(cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPushType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsSelect(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(PushMessage entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(PushMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
